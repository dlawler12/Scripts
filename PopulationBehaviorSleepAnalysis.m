% *************************************************************************
% Program name  : PopulationBehaviorSleepAnalysis.m
% Author        : Dan Lawler
% Last edit date: Aug 22 2019
% Purpose       : Pass in behavioral data generated by behavior recognition
%                 software. Simplify data by translating behaviors to 
%                 binary paused or moving states. Smooth data by removing 
%                 short changes in state. Resulting data set is analysed 
%                 and plotted, and saved in a PDF file.
% *************************************************************************

clear all
close all
clc
timeInterval = 1/60; %time per frame (min)
cd('Z:\Dan Lawler\Projects\Sleep\Melatonin\12hrdata'); %% change directory to folder with ArenaWormTracker output files

files = dir('*.mat');
boutLength = 20; % minimum sleep bout length
leaveSleep = 5; % frames of continuous activity to designate sleep exit

for i = 1:length(files)
%% Load data
    load(files(i).name);
    split=strsplit(files(i).name,'.');
    str=char(split(1));
    d=length(TimeAnalysis);
   	dataSet = TimeAnalysis(1).Data; % For full arena data
    if d>1
        for w=2:d
            dataSet = [dataSet;TimeAnalysis(w).Data];
        end
    end

    eval(['Raw_',str,'=transpose(dataSet);']); % save a copy of the raw dataset
    
    %% Iterate through behavioral data extracting sleep bouts
        matrixSize = size(dataSet); % find size of data matrix
        rawState = zeros(matrixSize(1),matrixSize(2)); % matrix for raw state values
        count = zeros(matrixSize(1),matrixSize(2));
        count(:,1)=1;
        temp1 = zeros(1,boutLength);
        temp2 = zeros(1,boutLength);
        twitchPause = zeros(matrixSize(1),matrixSize(2)); % stores whether data point is a percieved twitch (during sleep) or pause (during motion)
        partOfTwitchPause = zeros(matrixSize(1),matrixSize(2)); % stores whether data point is part of twitch or pause event
        corrected = zeros(matrixSize(1),matrixSize(2)); % eventual matrix with corrected sleep behavior

        for t = 1:matrixSize(1)
            for j = 1:matrixSize(2)

               %% Raw State isolates pausing events in binary matrix
                if (dataSet(t,j) == 3)
                    rawState(t,j) = 0;
                else
                    rawState(t,j) = 1;
                end

               %% Count measures the length of each bout in the raw state binary matrix
               if j>1
                    if (rawState(t,j) == rawState(t,j-1))
                        count(t,j)=count(t,j-1)+1;
                    else
                        count(t,j)=1;
                    end
               end
            end
        end

        for t = 1:matrixSize(1)
            for j = 1:matrixSize(2)

               %% Twitch/Pause
               % This loop finds where there are new twitches or pauses
               if j>(boutLength+1) && j<(matrixSize(2)-boutLength+1) % only check for valid data points given the necessary bout length
                    temp1 = count(t,j+1:j+boutLength); % isolate the bouts in the data of a minimum bout length following the current data point
                    temp2 = twitchPause(t,j-boutLength:j-1); % find if previous data from of a minimum bout length has twitch/pause events
                    check = sum(temp2(temp2 == 1)) < 1 || rawState(t,j) ~= corrected(t,j-boutLength-1); % if there's no twitches/pauses or if the raw state isn't the same as prior to this minimum bout
                    if(count(t,j)==1 && sum(temp1(temp1 == 1)) > 0 && check) % if this data point is a change from the previous raw state, the state changes back within the minimum bout length, and the previous check applies, then this data point represents a new twitch or pause.
                        twitchPause(t,j) = 1; % "1" represents truth
                    end
               end

               %% Part of twitch/pause
               % This loop finds whether a current data point is part of a
               % twitch or pause that will eventually be corrected
               if j>1
                   if rawState(t,j) == rawState(t,j-1) % if the raw state doesn't change, whatever twitch/pause state was true prior is still true
                       partOfTwitchPause(t,j)=partOfTwitchPause(t,j-1);
                   else % else, whether or not this data point represents a twitch or pause is dependent on th twitchpause variable
                       partOfTwitchPause(t,j)=twitchPause(t,j);
                   end
               end
               
               %% Check if leaving a Sleep Bout
               % The parameters to leave a sleep bout are slightly
               % different than entering a bout. If there are 5 consecutive
               % frames of movement, the animal can be assumed awake. This
               % loop catches moments where the animal did act out behavior
               if j>(leaveSleep+1)
                   if rawState(t,j)==1 && partOfTwitchPause(t,j)==1 && sum(corrected(t,j-(leaveSleep-1):j-1)) == 0
                       if sum(dataSet(t,j-(leaveSleep-1):j)~=3)==leaveSleep && sum(dataSet(t,j-(leaveSleep-1):j)>1)==leaveSleep
                           partOfTwitchPause(t,j) = 0;
                       end
                   end
               end

               %% Corrected
               % The corrected matrix applies the final temporal correction
               % of twitches and pauses from the raw state
               if partOfTwitchPause(t,j) == 0
                   corrected(t,j) = rawState(t,j);
               else
                   corrected(t,j) = 1-rawState(t,j);
               end
            end
        end
        tempSummary = zeros(3,(matrixSize(2)-1)/900); %Split by 15 minute segments
        % First column total non-missed decisions
        % Second column raw sleep decisions
        % Third column smoothed sleep decisions
        for u = 1:(matrixSize(2)-1)/900
            tempSummary(1,u) = sum(sum(dataSet(:,(u-1)*900+1:u*900) > 1));
            tempSummary(2,u) = sum(sum(dataSet(:, (u-1)*900+1:u*900) == 3));
            tempSummary(3,u) = sum(sum(corrected(:, (u-1)*900+1:u*900) == 0));
        end

        eval(['Smooth',int2str(boutLength),'_',str,'=transpose(corrected);']);
        eval(['SummaryData',int2str(boutLength),'_',str,'=tempSummary;']);

        %% Histogram Calculation (sleep)
        eval(['histfile=Smooth',int2str(boutLength),'_',str,';']);
        [~,animals] = size(histfile);
        newmat = zeros(43201,animals);
        for h = 1:animals
            count = 0 ;
            for u = 1:43201
                if(histfile(u,h)==0)
                    newmat(u,h)=count+1;
                    count=count+1;
                else
                    count = 0;
                end
            end
        end

        maxs = zeros(43201,animals);
        for e = 1:animals
            for g = 1:43200
                if(newmat(g+1,e)<newmat(g,e))
                    maxs(g,e)=newmat(g,e);
                end
            end
        end

        g=43201;
        for o = 1:animals
            maxs(g,o)=newmat(g,o);
        end
        maxs(maxs==0)=NaN;
        bins = [0,20,50,100,200,500,1000,10000000];
        eval(['HistSleep',int2str(boutLength),'_',str,'=histcounts(maxs,bins);']);

        %% Histogram Calculation (awake)
        newmat = zeros(43201,animals);
        for z = 1:animals
            count = 0 ;
            for q = 1:43201
                if(histfile(q,z)==1)
                    newmat(q,z)=count+1;
                    count=count+1;
                else
                    count = 0;
                end
            end
        end

        maxs = zeros(43201,animals);
        for b = 1:animals
            for l = 1:43200
                if(newmat(l+1,b)<newmat(l,b))
                    maxs(l,b)=newmat(l,b);
                end
            end
        end

        l=43201;
        for r = 1:animals
            maxs(l,r)=newmat(l,r);
        end
        maxs(maxs==0)=NaN;
        bins = [0,20,50,100,200,500,1000,10000000];
        eval(['HistAwake',int2str(boutLength),'_',str,'=histcounts(maxs,bins);']);

%% Final Plots
% Goal of this section is to create a single figure plot for each arena and
% condition with various types of plots that we care about. They will include:
% 1) Ethogram of sleep over time
% 2) Time course plot under the Ethogram
% 3) Histogram of awake bout lengths and sleep bout lengths
    eval(['test=Smooth',int2str(boutLength),'_',str,';']);
    figure(i)
    test = transpose(test);
    sortfile=zeros(animals,2); % Sort by most sleep to least
    for n = 1:animals
        sortfile(n,1)=mean(test(n,:));
        sortfile(n,2)=n;
    end
    [~,idx] = sort(sortfile(:,1));
    test=test(idx,:);
    test = transpose(test);
    
    subplot(3,1,1)
    % ethogram of sleep behavior (sleep = black, awake = white)
    colormap gray
    heatmap(transpose(test))
    title('Ethogram')
    
    subplot(6,1,3)
    % timecourse of sleep fraction average (by minute in this case)
    basalminutebin = zeros(720,1);
    for t = 1:720
        basalminutebin(t)=1-(mean(mean(test(60*(t-1)+1:60*t,:))));
    end
    plot(basalminutebin)
    title('Timecourse')
    xlim([0 720])
    ylim([0 1])
    xlabel('Time (minutes)')
    ylabel('Sleep Fraction')
    
    subplot(2,2,3)
    % awake histogram bins
    eval(['bar(HistAwake',int2str(boutLength),'_',str,'/animals);']);
    title('Awake')
    ylim([0 20])
    ylabel('Bout Count (per animal)')
    xticks([1 2 3 4 5 6 7])
    xticklabels({'0-20','20-50','50-100','100-200','200-500','500-1000','>1000'})
    xtickangle(45)
    xlabel('Bout Length (seconds)')

    subplot(2,2,4)
    % sleep histogram bins
    eval(['bar(HistSleep',int2str(boutLength),'_',str,'/animals);']);
    title('Sleep')
    ylim([0 20])
    ylabel('Bout Count (per animal)')
    xticks([1 2 3 4 5 6 7])
    xticklabels({'0-20','20-50','50-100','100-200','200-500','500-1000','>1000'})
    xtickangle(45)
    xlabel('Bout Length (seconds)')
    
%Save    
    sgtitle(str,'Interpreter','none')
    saveas(i,[str,'.pdf'])
end